{"version":3,"file":"static/js/925.337621b3.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","@crema/core/Form/FormTextArea.jsx","pages/sample/About Page/AboutPagePostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React from 'react';\nimport {Form } from \"antd\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport PropTypes from \"prop-types\";\n\nconst FormTextArea = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <TextArea rows={4}/>\n        </Form.Item>\n    );\n};\n\nexport default FormTextArea;\n\nFormTextArea.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useState} from 'react';\nimport {Button, Col, Form, message, Row, Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport ImgCrop from \"antd-img-crop\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport FormTextArea from \"../../../@crema/core/Form/FormTextArea\";\n\n\nconst initialValueForm = {\n    image: [],\n    title_uz: \"\",\n    title_ru: \"\",\n    title_en: \"\",\n    sub_title_ru: \"\",\n    sub_title_uz: \"\",\n    sub_title_en: \"\",\n\n};\n\n\nconst AboutPagePostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [fileListProps, setFileListProps] = useState([]);\n\n\n\n\n\n    // query-about-page\n    const {\n        mutate: postAboutPageMutate,\n        data: postAboutPage,\n        isLoading: postAboutPageLoading,\n        isSuccess: postAboutPageSuccess,\n\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editAboutPageLoading,\n        data: editAboutPageData,\n        refetch: editAboutPageRefetch,\n        isSuccess: editAboutPageSuccess,\n\n    } = useQuery([\"edit-about-page\", editId], () => apiService.getDataByID(\"/about/about\", editId), {\n        enabled: false\n    });\n\n\n    // put-query\n    const {\n        mutate: putAboutPage,\n        isLoading: putAboutPageLoading,\n        data: putData,\n        isSuccess: putAboutPageSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n\n\n    //                                              =====useEffect====\n\n    // about-page success\n    useEffect(() => {\n        if (putAboutPageSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n        if (postAboutPageSuccess || putAboutPageSuccess) {\n            navigate('/about-page')\n        }\n    }, [postAboutPage, putData])\n\n    // if edit about-page\n    useEffect(() => {\n        if (editId !== \"\") {\n            editAboutPageRefetch();\n        }\n    }, [editId]);\n\n    // if no edit about-page\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit about-page\n    useEffect(() => {\n            const image = [\n                {\n                    uid: editAboutPageData?.id,\n                    name: editAboutPageData?.id,\n                    status: \"done\",\n                    url: editAboutPageData?.image\n                }\n            ]\n        console.log(image)\n\n\n        if (editAboutPageSuccess) {\n\n            const edit = {\n                title_uz: editAboutPageData?.title_uz,\n                title_ru: editAboutPageData?.title_ru,\n                title_en: editAboutPageData?.title_en,\n                sub_title_ru: editAboutPageData?.sub_title_ru,\n                sub_title_uz: editAboutPageData?.sub_title_uz,\n                sub_title_en: editAboutPageData?.sub_title_en,\n                image,\n            }\n\n\n            setFileListProps(image);\n            form.setFieldsValue(edit)\n        }\n\n    }, [editAboutPageData])\n    const onFinish = (values) => {\n\n        const formData = new FormData()\n\n        formData.append('title_uz', values.title_uz);\n        formData.append('title_ru', values.title_ru);\n        formData.append('title_en', values.title_en);\n        formData.append('sub_title_ru', values.sub_title_ru);\n        formData.append('sub_title_uz', values.sub_title_uz);\n        formData.append('sub_title_en', values.sub_title_en);\n\n        if (fileListProps[0]?.originFileObj) {\n            formData.append('image', fileListProps[0]?.originFileObj);\n        }\n\n        if (editAboutPageSuccess) {\n\n            putAboutPage({url: \"/about/about\", data:formData, id: editId});\n        } else {\n            postAboutPageMutate({url: \"/about/about/\", data:formData});\n        }\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem('myFormValues', JSON.stringify(form.getFieldsValue()),);\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n    const onChangeImage = ({fileList: newFileList}) => {\n\n        setFileListProps(newFileList);\n        form.setFieldsValue({image: newFileList});\n\n\n    };\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n    return (<div>\n        {(postAboutPageLoading || editAboutPageLoading || putAboutPageLoading ) ? <AppLoader/> :\n            <Form\n                form={form}\n                name=\"basic\"\n                labelCol={{\n                    span: 24\n                }}\n                wrapperCol={{\n                    span: 24\n                }}\n                style={{\n                    maxWidth: \"100%\"\n                }}\n                initialValues={initialValueForm}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n\n\n                <Row gutter={20}>\n\n                    <Col span={24}>\n                        <FormInput\n                            required={true}\n                            required_text={'Необходимо ввести заголовок'}\n                            label={'Заголовок Ru'}\n                            name={'title_ru'}\n                        />\n\n                    </Col>\n                    <Col span={24}>\n                        <FormInput\n                            required={true}\n                            required_text={'Sarlavha kiritish kerak'}\n                            label={'Sarlavha Uz'}\n                            name={'title_uz'}\n                        />\n\n\n                    </Col>\n                    <Col span={24}>\n                        <FormInput\n                            required={true}\n                            required_text={'A title is required'}\n                            label={'Title En'}\n                            name={'title_en'}\n                        />\n\n                    </Col>\n                </Row>\n                <Row gutter={20}>\n\n                    <Col span={24}>\n                        <FormTextArea\n                            required={true}\n                            required_text={'Требуется дополнительный заголовок'}\n                            label={'Подзаголовок Ru'}\n                            name={'sub_title_ru'}\n                        />\n\n                    </Col>\n                    <Col span={24}>\n                        <FormTextArea\n                            required={true}\n                            required_text={'Qo\\'shimcha sarlavha talab qilinadi'}\n                            label={'Qo\\'shimcha Sarlavha Uz'}\n                            name={'sub_title_uz'}\n                        />\n\n\n                    </Col>\n                    <Col span={24}>\n                        <FormTextArea\n                            required={true}\n                            required_text={'An additional title is required'}\n                            label={'Sub Title En'}\n                            name={'sub_title_en'}\n                        />\n\n                    </Col>\n                </Row>\n                <Row gutter={20}>\n                    <Col span={12}>\n                        <Form.Item\n                            label='Изображение'\n                            name={'image'}\n                            rules={[{required: true, message: 'Требуется изображение'}]}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={1}\n                                    fileList={fileListProps}\n                                    listType='picture-card'\n                                    onChange={onChangeImage}\n                                    onPreview={onPreview}\n                                    beforeUpload={() => false}\n                                >\n                                    {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n                </Row>\n\n\n                <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                    {editAboutPageSuccess ? 'Изменить' : 'Создать'}\n                </Button>\n            </Form>}\n    </div>);\n};\n\nexport default AboutPagePostEdit;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","TextArea","rows","initialValueForm","image","title_uz","title_ru","title_en","sub_title_ru","sub_title_uz","sub_title_en","AboutPagePostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","mutate","postAboutPageMutate","data","postAboutPage","isLoading","postAboutPageLoading","isSuccess","postAboutPageSuccess","useMutation","url","apiService","postData","onSuccess","success","onError","error","obj","response","concat","editAboutPageLoading","editAboutPageData","refetch","editAboutPageRefetch","editAboutPageSuccess","useQuery","getDataByID","enabled","putAboutPage","putAboutPageLoading","putData","putAboutPageSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","uid","status","console","log","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","_fileListProps$","formData","FormData","_fileListProps$2","append","originFileObj","onFinishFailed","errorInfo","autoComplete","Row","gutter","Col","FormInput","FormTextArea","ImgCrop","Upload","maxCount","fileList","listType","onChange","_ref3","newFileList","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","open","document","write","outerHTML","beforeUpload","length","Button","htmlType","width","marginTop"],"sourceRoot":""}