{"version":3,"file":"static/js/507.6ecf7d43.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","@crema/core/Form/FormTextArea.jsx","pages/sample/News/NewsPostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React from 'react';\nimport {Form } from \"antd\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport PropTypes from \"prop-types\";\n\nconst FormTextArea = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <TextArea rows={4}/>\n        </Form.Item>\n    );\n};\n\nexport default FormTextArea;\n\nFormTextArea.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useState} from 'react';\nimport {Button, Col, Form, Input, message, Row, Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport ImgCrop from \"antd-img-crop\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport FormTextArea from \"../../../@crema/core/Form/FormTextArea\";\n\n\nconst initialValueForm = {\n    image: [],\n    title_uz: \"\",\n    title_ru: \"\",\n    title_en: \"\",\n    text_ru: \"\",\n    text_uz: \"\",\n    text_en: \"\",\n    link: \"\"\n};\n\n\nconst NewsPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [fileListProps, setFileListProps] = useState([]);\n\n\n    // query-news\n    const {\n        mutate: postNewsMutate,\n        data: postNews,\n        isLoading: postNewsLoading,\n        isSuccess: postNewsSuccess,\n\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editNewsLoading,\n        data: editNewsData,\n        refetch: editNewsRefetch,\n        isSuccess: editNewsSuccess,\n\n    } = useQuery([\"edit-news\", editId], () => apiService.getDataByID(\"/about/news\", editId), {\n        enabled: false\n    });\n\n\n    // put-query\n    const {\n        mutate: putNewsPage,\n        isLoading: putNewsPageLoading,\n        data: putData,\n        isSuccess: putNewsPageSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n\n    //                                              =====useEffect====\n\n    // news success\n    useEffect(() => {\n        if (putNewsPageSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n        if (postNewsSuccess || putNewsPageSuccess) {\n            navigate('/news')\n        }\n    }, [postNews, putData])\n\n    // if edit news\n    useEffect(() => {\n        if (editId !== \"\") {\n            editNewsRefetch();\n        }\n    }, [editId]);\n\n    // if no edit news\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit news\n    useEffect(() => {\n\n\n        const image = [{\n            uid: editNewsData?.id,\n            name: editNewsData?.id,\n            status: \"done\",\n            url: editNewsData?.image\n        }]\n\n\n        if (editNewsSuccess) {\n\n            const edit = {\n                title_uz: editNewsData?.title_uz,\n                title_ru: editNewsData?.title_ru,\n                title_en: editNewsData?.title_en,\n                text_ru: editNewsData?.text_ru,\n                text_uz: editNewsData?.text_uz,\n                text_en: editNewsData?.text_en,\n                link: editNewsData.link.split('//')[1],\n                image,\n            }\n\n\n            setFileListProps(image);\n            form.setFieldsValue(edit)\n        }\n\n    }, [editNewsData])\n    const onFinish = (values) => {\n        const formData = new FormData();\n\n        formData.append('title_ru', values.title_ru);\n        formData.append('title_uz', values.title_uz);\n        formData.append('title_en', values.title_en);\n        formData.append('text_ru', values.text_ru);\n        formData.append('text_uz', values.text_uz);\n        formData.append('text_en', values.text_en);\n        formData.append('link', `https://${values.link}`);\n\n\n        if (fileListProps[0]?.originFileObj) {\n            formData.append('image', fileListProps[0]?.originFileObj);\n        }\n\n        if (editNewsSuccess) {\n\n            putNewsPage({url: \"/about/news\", data: formData, id: editId});\n        } else {\n            postNewsMutate({url: \"/about/news/\", data: formData});\n        }\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem('myFormValues', JSON.stringify(form.getFieldsValue()),);\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n    const onChangeImage = ({fileList: newFileList}) => {\n        setFileListProps(newFileList);\n        form.setFieldsValue({image: newFileList});\n\n    };\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n    return (<div>\n        {(postNewsLoading || editNewsLoading || putNewsPageLoading) ? <AppLoader/> :\n            <Form\n                form={form}\n                name=\"basic\"\n                labelCol={{\n                    span: 24\n                }}\n                wrapperCol={{\n                    span: 24\n                }}\n                style={{\n                    maxWidth: \"100%\"\n                }}\n                initialValues={initialValueForm}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n\n\n                <Row gutter={20}>\n\n                    <Col span={24}>\n                        <FormInput\n                            required={true}\n                            required_text={'Необходимо ввести заголовок'}\n                            label={'Заголовок Ru'}\n                            name={'title_ru'}\n                        />\n\n                    </Col>\n                    <Col span={24}>\n                        <FormInput\n                            required={true}\n                            required_text={'Sarlavha kiritish kerak'}\n                            label={'Sarlavha Uz'}\n                            name={'title_uz'}\n                        />\n\n\n                    </Col>\n                    <Col span={24}>\n                        <FormInput\n                            required={true}\n                            required_text={'A title is required'}\n                            label={'Title En'}\n                            name={'title_en'}\n                        />\n\n                    </Col>\n                </Row>\n                <Row gutter={20}>\n                    <Col span={24}>\n                        <FormTextArea\n                            required={true}\n                            required_text={'Требуется описание'}\n                            label={'Описание Ru'}\n                            name={'text_ru'}\n                        />\n                    </Col>\n                    <Col span={24}>\n                        <FormTextArea\n                            required={true}\n                            required_text={'Tavsif kiritish kerak'}\n                            label={'Tavsif Uz'}\n                            name={'text_uz'}\n                        />\n                    </Col>\n                    <Col span={24}>\n                        <FormTextArea\n                            required={true}\n                            required_text={'A description is required'}\n                            label={'Description En'}\n                            name={'text_en'}\n                        />\n                    </Col>\n                </Row>\n\n                <Row gutter={20}>\n                    <Col span={12}>\n                        <Form.Item\n                            label=\"News link\"\n                            name=\"link\"\n                            rules={[{required: true, message: 'Требуется link'}]}\n                        >\n                            <Input addonBefore={'https://'}/>\n                        </Form.Item>\n\n                    </Col>\n                    <Col span={12}>\n                        <Form.Item\n                            label='Изображение'\n                            name={'image'}\n                            rules={[{required: true, message: 'Требуется изображение'}]}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={1}\n                                    fileList={fileListProps}\n                                    listType='picture-card'\n                                    onChange={onChangeImage}\n                                    onPreview={onPreview}\n                                    beforeUpload={() => false}\n                                >\n                                    {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n\n                </Row>\n\n\n                <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                    {editNewsSuccess ? 'Изменить' : 'Создать'}\n                </Button>\n            </Form>}\n    </div>);\n};\n\nexport default NewsPostEdit;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","TextArea","rows","initialValueForm","image","title_uz","title_ru","title_en","text_ru","text_uz","text_en","link","NewsPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","mutate","postNewsMutate","data","postNews","isLoading","postNewsLoading","isSuccess","postNewsSuccess","useMutation","url","apiService","postData","onSuccess","success","onError","error","obj","response","concat","editNewsLoading","editNewsData","refetch","editNewsRefetch","editNewsSuccess","useQuery","getDataByID","enabled","putNewsPage","putNewsPageLoading","putData","putNewsPageSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","uid","status","edit","split","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","_fileListProps$","formData","FormData","_fileListProps$2","append","originFileObj","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","FormTextArea","addonBefore","ImgCrop","Upload","maxCount","fileList","listType","onChange","_ref3","newFileList","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","open","document","write","outerHTML","beforeUpload","length","Button","htmlType","width","marginTop"],"sourceRoot":""}