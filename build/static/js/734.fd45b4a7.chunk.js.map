{"version":3,"file":"static/js/734.fd45b4a7.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","pages/sample/Banner/BannerPostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect,  useState} from 'react';\nimport {Button, Col, Form,  message,  Row,  Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport ImgCrop from \"antd-img-crop\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\n\nconst initialValueForm = {\n    image:[],\n    title_ru:\"\",\n    title_uz:\"\",\n    title_en:\"\",\n\n};\n\n\n\n\nconst BannerPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n    const [fileListProps, setFileListProps] = useState([])\n\n\n\n\n\n    // query-banner\n    const {\n        mutate: postBannerMutate,\n        data: postBanner,\n        isLoading: postBannerLoading,\n        isSuccess: postBannerSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editBannerLoading,\n        data: editBannerData,\n        refetch: editBannerRefetch,\n        isSuccess: editBannerSuccess,\n    } = useQuery([\"edit-banner\", editId], () => apiService.getDataByID(\"/about/banner\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putBanner,\n        isLoading: putBannerLoading,\n        data: putData,\n        isSuccess: putBannerSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // banner success\n    useEffect(() => {\n        if (putBannerSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postBannerSuccess || putBannerSuccess) {\n\n            navigate('/banner')\n        }\n    }, [postBanner, putData])\n\n\n    // if edit contact\n    useEffect(() => {\n        if (editId !== \"\") {\n            editBannerRefetch();\n        }\n    }, [editId]);\n\n    // if no edit banner\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit banner\n    useEffect(() => {\n        if (editBannerSuccess) {\n\n            const image=[{\n                uid: editBannerData.id,\n                name: editBannerData.id,\n                status: \"done\",\n                url: editBannerData.image\n            }];\n\n\n\n            const edit = {\n                image,\n                title_ru:editBannerData.title_ru,\n                title_uz:editBannerData.title_uz,\n                title_en:editBannerData.title_en,\n\n            }\n\n\n            setFileListProps(image)\n            form.setFieldsValue(edit)\n        }\n\n    }, [editBannerData])\n\n\n    const onFinish = (values) => {\n\n\n        const formData = new FormData();\n\n        formData.append('title_ru', values.title_ru);\n        formData.append('title_uz', values.title_uz);\n        formData.append('title_en', values.title_en);\n\n\n        if (fileListProps[0]?.originFileObj) {\n            formData.append('image', fileListProps[0]?.originFileObj);\n        }\n\n\n\n        if (editBannerData) {\n            putBanner({url: '/about/banner', data: formData, id: editId})\n        } else {\n            postBannerMutate({url: \"/about/banner/\", data: formData});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n    // image\n    const onChangeImage = ({fileList: newFileList}) => {\n        setFileListProps(newFileList);\n        form.setFieldsValue({image: newFileList});\n    };\n\n\n\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n\n    return (\n        <div>\n            {(postBannerLoading || editBannerLoading || putBannerLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={24}>\n                            <FormInput\n                                required={true}\n                                required_text={'Необходимо ввести заголовок'}\n                                label={'Title Ru'}\n                                name={'title_ru'}\n                            />\n\n                        </Col>\n                        <Col span={24}>\n                            <FormInput\n                                required={true}\n                                required_text={'Sarlavha kiritish kerak'}\n                                label={'Title Uz'}\n                                name={'title_uz'}\n                            />\n\n                        </Col>\n                        <Col span={24}>\n                            <FormInput\n                                required={true}\n                                required_text={'A title must be entered'}\n                                label={'Title En'}\n                                name={'title_en'}\n                            />\n\n                        </Col>\n                    </Row>\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label='Изображение'\n                                name={'image'}\n                                rules={[{required: true, message: 'Требуется изображение.'}]}>\n                                <ImgCrop rotationSlider>\n                                    <Upload\n                                        maxCount={1}\n                                        fileList={fileListProps}\n                                        listType='picture-card'\n                                        onChange={onChangeImage}\n                                        onPreview={onPreview}\n                                        beforeUpload={() => false}\n                                    >\n                                        {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                    </Upload>\n                                </ImgCrop>\n                            </Form.Item>\n                        </Col>\n\n                    </Row>\n\n\n\n\n\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editBannerSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default BannerPostEdit;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","initialValueForm","image","title_ru","title_uz","title_en","BannerPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","mutate","postBannerMutate","data","postBanner","isLoading","postBannerLoading","isSuccess","postBannerSuccess","useMutation","url","apiService","postData","onSuccess","success","onError","error","obj","response","concat","editBannerLoading","editBannerData","refetch","editBannerRefetch","editBannerSuccess","useQuery","getDataByID","enabled","putBanner","putBannerLoading","putData","putBannerSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","uid","status","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","_fileListProps$","formData","FormData","_fileListProps$2","append","originFileObj","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","ImgCrop","rotationSlider","Upload","maxCount","fileList","listType","onChange","_ref3","newFileList","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","open","document","write","outerHTML","beforeUpload","length","Button","htmlType","width","marginTop"],"sourceRoot":""}